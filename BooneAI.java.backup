
import java.awt.Point;
import java.util.ArrayList;
import java.util.List;
import java.util.Collections;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Hashtable;

public class BooneAI implements AIModule
{
	Stack<Point> pathStack = new Stack<Point>();
	List<Point> path = new ArrayList<Point>();
	//List<PNode> openList = new ArrayList<PNode>();
	MinHeap openList = new MinHeap();
	//TreeSet<Point> closedList = new TreeSet<Point>();
	//TreeSet<PNode> openList = new TreeSet<PNode>();
	List<Point> closedList = new ArrayList<Point>();
	Hashtable visitedH;
	PNode visited[][];
	PNode CurrentPNode;
	
	public List<Point> createPath(final TerrainMap map)
	{
		PNode temp;
		visited = new PNode[map.getWidth()][map.getHeight()];
		//visitedH = new Hashtable(map.getWidth()*map.getHeight());
		
		Point CurrentPoint = map.getStartPoint();
		CurrentPNode = new PNode(CurrentPoint, 0, this.getHeuristic(map, CurrentPoint, map.getEndPoint()));
		visited[CurrentPoint.x][CurrentPoint.y] = CurrentPNode;
		//visitedH.put(CurrentPoint.hashCode(), CurrentPNode);
		openList.add(CurrentPNode);
		//System.out.println(visitedH.containsKey(CurrentPoint.hashCode()));
		
		while(!(openList.size() == 0))
		{
			//get min from open list
			//CurrentPNode = openList.get(0);
			//openList.remove(0);
			CurrentPNode = (PNode)openList.remove();
			//System.out.println(openList.size());
			//openList.remove(CurrentPNode);
			CurrentPoint = CurrentPNode.getPoint();
			//if its value is in the double array with lest cost
			//if((!(closedList.contains(CurrentPoint))) && ((visited[CurrentPoint.x][CurrentPoint.y] == null) || (visited[CurrentPoint.x][CurrentPoint.y].compareTo(CurrentPNode) >= 0)))
			if((!(closedList.contains(CurrentPoint))) && ((visited[CurrentPoint.x][CurrentPoint.y] == null) || (visited[CurrentPoint.x][CurrentPoint.y].compareTo(CurrentPNode) >= 0)))
			{
				//////put its value into the double array
				visited[CurrentPoint.x][CurrentPoint.y] = CurrentPNode;
				//visitedH.remove(CurrentPoint.hashCode());
				//visitedH.put(CurrentPoint.hashCode(), CurrentPNode);
				//get neighbors
				Point neighbors[] = map.getNeighbors(CurrentPoint);
				////for each neighbor 0-8
				for(int i = 0; i < neighbors.length; i++)
				{
					temp = new PNode(neighbors[i], CurrentPNode.getCost() + map.getCost(CurrentPoint, neighbors[i]), this.getHeuristic(map, neighbors[i], map.getEndPoint()));
					temp.setPrev(CurrentPoint);
					////put them in open list
					openList.add(temp);
				}
				closedList.add(CurrentPoint);
				//Collections.sort(openList);
			}
			if(CurrentPoint.equals(map.getEndPoint()) == true)
			{
				break;
			}
		}
		
		//look at final point in visited and trace to start point;
		
		CurrentPoint = map.getEndPoint();
		CurrentPNode = visited[CurrentPoint.x][CurrentPoint.y];
		//CurrentPNode = (PNode)visitedH.get(CurrentPoint.hashCode());
		//put them into a pathStack stack
		do
		{
			pathStack.push(CurrentPNode.getPoint());
			//System.out.println(CurrentPNode.getPoint());
			CurrentPoint = CurrentPNode.getPrev();
			CurrentPNode = visited[CurrentPoint.x][CurrentPoint.y];
			//CurrentPNode = (PNode)visitedH.get(CurrentPoint.hashCode());
		}
		while(CurrentPoint.equals(map.getStartPoint()) == false);
		
		pathStack.push(map.getStartPoint());
		
		//pop the stack into a path list
		while(!(pathStack.empty()))
		{
			path.add(pathStack.pop());
		}
		//return the list
		
		// We're done!  Hand it back.
		return path;
	}
	
	//private double getHeuristic(final TerrainMap map, final Point pt1, final Point pt2) // stress test data structure
	//{
	//	return 0;
	//}
	
	/*private double getHeuristic(final TerrainMap map, final Point pt1, final Point pt2) //e^(f2-f1) THERE IS A BUG
	{
		double chebyshev = Math.max(Math.abs(pt1.x - pt2.x),Math.abs(pt1.y - pt2.y));
		double heightDifference = (double)map.getTile(pt1) - (double)map.getTile(pt2);
		double absoluteHeightDifference = Math.abs(heightDifference);
		double stepWidth;
		
		if(heightDifference == 0)
		{
			return chebyshev;
		}
		else if(heightDifference > 0)//e^(-1) is max p1 above p2
		{
			if(absoluteHeightDifference > chebyshev) // if the height is further off than the distance
			{
				return Math.exp(absoluteHeightDifference - chebyshev) + (Math.exp((double)-1.0) * (chebyshev - 1));
			}
			else if(absoluteHeightDifference < chebyshev) // if the height is less than the distance
			{
				return (Math.exp((double)-1.0) * absoluteHeightDifference) + (chebyshev - absoluteHeightDifference); 
			}
			else // height is the distance
			{
				return Math.exp((double)-1.0) * absoluteHeightDifference;
			}
		}
		else//(heightDifference < 0)//e^255 is max p1 below p2
		{
			if(absoluteHeightDifference > chebyshev)//if the height is further off than the distance
			{
				stepWidth = Math.floor(absoluteHeightDifference / chebyshev);
				return Math.exp(stepWidth) * chebyshev;
			}
			else if(absoluteHeightDifference < chebyshev) // if the height is less than the distance
			{
				return chebyshev;
			}
			else // height is the distance
			{
				return chebyshev;
			}
		}
	}*/
	
	private double getHeuristic(final TerrainMap map, final Point pt1, final Point pt2) //f2/(f1+1) ///BUG
	{
		double p1H = (double)map.getTile(pt1);
		double p2H = (double)map.getTile(pt2);
		double chebyshev = Math.max(Math.abs(pt1.x - pt2.x),Math.abs(pt1.y - pt2.y));
		double heightDifference = p1H - p2H;
		double absoluteHeightDifference = Math.abs(heightDifference);
		double chunkWidth;
		double total = 0;
		double tempH;

		if(heightDifference >= 0) // p1 is above p2
		{
			return 0;
		}
		else // p1 is below p2
		{
			/*if(absoluteHeightDifference > chebyshev) // if were further up than away
			{
				chunkWidth =  Math.floor(absoluteHeightDifference / chebyshev);
				if(chunkWidth == 0)
				{
					return p1H / (p2H + 2);
				}
				for(int i = 0; ((p1H > p2H) && (i < chunkWidth)); i++)
				{
					tempH = p1H;
					p1H -= chunkWidth;
					if(p1H < p2H)
					{
						p1H = p2H;
					}
					total += chunkWidth * (tempH / p1H);
				}
				return Math.floor(total);
			}
			else if(absoluteHeightDifference < chebyshev) // were further away than up
			{
				return absoluteHeightDifference;
			}
			else // they are equal
			{
				return chebyshev;
			}*/
			return absoluteHeightDifference;
		}
	}
}